Анализ работы кода для лабораторной работы


---

1. Односвязный список (Singly Linked List)

1. Инициализация
Создаётся head – указатель на начало списка, который изначально равен nullptr (список пуст).


2. Добавление элементов в конец
Четыре вызова insertAtEnd(head, val) добавляют элементы 1, 2, 3, 4 в конец списка.

Если список пуст – первый элемент становится head.

Иначе проходит по всему списку до последнего элемента и добавляет новый узел.



3. Вывод списка
Функция printList(head) проходит по всем узлам и выводит их значения (1 2 3 4).


4. Удаление элемента после заданного
deleteAfter(head, 1) находит второй элемент (индекс 1 – элемент 2) и удаляет следующий (3).
Теперь список: 1 2 4.


5. Вывод списка
Повторный вывод показывает обновлённый список (1 2 4).


6. Добавление элемента в начало
insertAtBeginning(head, 10) делает 10 новым head, теперь список: 10 1 2 4.


7. Вывод списка
Итоговый вывод (10 1 2 4).




---

2. Двусвязный список (Doubly Linked List)

1. Инициализация
head = nullptr (пустой список).


2. Добавление элементов в конец
Четыре вызова insertAtEnd(head, val) формируют список 1 ⇄ 2 ⇄ 3 ⇄ 4.


3. Вывод списка
printList(head) показывает 1 2 3 4.


4. Удаление элемента после заданного
deleteAfter(head, 1) удаляет 3 (следующий после 2), теперь 1 ⇄ 2 ⇄ 4.


5. Вывод списка
Повторный вывод показывает 1 2 4.


6. Добавление элемента в начало
insertAtBeginning(head, 10) делает 10 новым head, теперь 10 ⇄ 1 ⇄ 2 ⇄ 4.


7. Вывод списка
Итоговый вывод (10 1 2 4).




---

3. Односвязный стек (Singly Linked Stack)

1. Инициализация
stack = nullptr (пустой стек).


2. Добавление элементов в стек (push)
push(stack, val) добавляет 1, 2, 3, 4 сверху вниз:

4
3
2
1


3. Вывод стека
printStack(stack) выводит 4 3 2 1.


4. Извлечение элемента (pop)
pop(stack) удаляет 4 (верхний элемент), стек становится:

3
2
1


5. Вывод стека
printStack(stack) показывает 3 2 1.


6. Добавление нового элемента (push)
push(stack, 10) кладёт 10 на вершину, стек становится:

10
3
2
1


7. Вывод стека
printStack(stack) показывает 10 3 2 1.




---

4. Очередь (Queue)

1. Инициализация
Очередь {front = nullptr, rear = nullptr} (пустая).


2. Добавление элементов (enqueue)
enqueue(q, val) добавляет 1 → 2 → 3 → 4 в очередь (FIFO).


3. Вывод очереди
printQueue(q) показывает 1 2 3 4.


4. Удаление элемента (dequeue)
dequeue(q) удаляет 1 (первый добавленный элемент), очередь становится:
2 → 3 → 4.


5. Вывод очереди
printQueue(q) показывает 2 3 4.


6. Добавление нового элемента (enqueue)
enqueue(q, 10) добавляет 10 в конец:
2 → 3 → 4 → 10.


7. Вывод очереди
printQueue(q) показывает 2 3 4 10.




---

